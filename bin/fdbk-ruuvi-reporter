#!/usr/bin/env python3

import json
from os.path import expanduser
from signal import signal, SIGINT
import sys

from fdbk.utils import get_reporter_argparser, create_db_connection
from ruuvitag_sensor.ruuvi import RuuviTagSensor, RunFlag

from fdbk_ruuvi_reporter import create_topic_dict, RuuviDataHandler

DATA_FILE = expanduser("~/.fdbk-ruuvi.json")


def read_data():
    try:
        with open(DATA_FILE, "r") as f:
            data = json.load(f)
    except FileNotFoundError:
        data = []

    return data


def add_topic_id(mac, topic_id):
    data = read_data()
    data.append(dict(mac=mac, topic_id=topic_id))

    with open(DATA_FILE, "w") as f:
        json.dump(data, f)


def create_topic(db_connection, db_parameters, name, mac):
    connection = create_db_connection(db_connection, db_parameters)
    topic_id = connection.add_topic(**create_topic_dict(mac, name))

    add_topic_id(mac, topic_id)


def start(**kwargs):
    flag = RunFlag()

    def handle_sigint(sig, frame):
        flag.running = False

    sensors = read_data()
    handler = RuuviDataHandler(sensors, **kwargs)

    signal(SIGINT, handle_sigint)
    RuuviTagSensor.get_datas(handler, None, flag)


parser = get_reporter_argparser()
parser.add_argument("--save-topic", nargs=2, type=str, metavar=("MAC", "TOPIC_ID",), help="Save topic id for mac")
parser.add_argument("--create-topic", nargs=2, type=str, metavar=("NAME", "MAC",), help="Create topic for name and mac")
args = parser.parse_args()

if args.save_topic:
    add_topic_id(*args.save_topic)
elif args.create_topic:
    create_topic(args.db_connection, args.db_parameters, *args.create_topic)
else:
    start(db_connection=args.db_connection, db_parameters=args.db_parameters, interval=args.interval, num_samples=args.num_samples, verbose=args.verbose)
